{"version":3,"sources":["components/SearchBox.js","components/Card.js","components/CardList.js","components/Scroll.js","containers/App.js","serviceWorker.js","index.js"],"names":["SearchBox","searchchange","type","className","placeholder","onChange","Card","name","email","id","src","alt","cardList","robots","cardArray","map","_user","i","key","Scroll","props","style","overflow","overflowX","border","height","children","App","onSearchChange","event","setState","searchfield","target","value","state","fetch","then","response","json","users","this","fillterRobots","filter","toLowerCase","includes","length","CardList","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"yNAaeA,EAXC,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aACd,OAEQ,2BAAOC,KAAK,SACZC,UAAU,UACVC,YAAY,oBACZC,SAAUJ,KCQPK,G,MAZH,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,KAAKC,EAAa,EAAbA,MAAMC,EAAO,EAAPA,GACvB,OACE,yBAAKN,UAAU,mDACT,yBAAKO,IAAG,+BAA0BD,EAA1B,YAAwCE,IAAI,WACpD,6BACE,4BAAKJ,GACL,2BAAIC,OCGDI,EAXA,SAAC,GAAa,IAAZC,EAAW,EAAXA,OACPC,EAAYD,EAAOE,KAAI,SAACC,EAAOC,GACjC,OAAO,kBAAC,EAAD,CAAMC,IAAKD,EAAGR,GAAII,EAAOI,GAAGR,GAAIF,KAAMM,EAAOI,GAAGV,KAAMC,MAAOK,EAAOI,GAAGT,WAElF,OACI,6BACIM,ICEGK,EARA,SAACC,GACZ,OACI,yBAAKC,MAAO,CAACC,SAAU,SAAUC,UAAW,SAASC,OAAQ,kBAAkBC,OAAO,UACjFL,EAAMM,WCwCJC,E,kDAvCX,aAAc,IAAD,8BACT,gBAaJC,eAAe,SAACC,GACZ,EAAKC,SAAS,CAAEC,YAAaF,EAAMG,OAAOC,SAb1C,EAAKC,MAAQ,CACTrB,OAAO,GACPkB,YAAa,IAJR,E,gEAQQ,IAAD,OAChBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAACjB,OAAQ0B,S,+BAOhC,IAAD,EACuBC,KAAKN,MAA1BrB,EADF,EACEA,OAAOkB,EADT,EACSA,YACRU,EAAgB5B,EAAO6B,QAAO,SAAA7B,GAChC,OAAOA,EAAON,KAAKoC,cAAcC,SAASb,EAAYY,kBAE1D,OACM9B,EAAOgC,OAGL,yBAAK1C,UAAU,MACP,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWF,aAAcuC,KAAKZ,iBAC9B,kBAAC,EAAD,KACI,kBAACkB,EAAD,CAAUjC,OAAQ4B,MANlC,8C,GA1BMM,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MACdC,SAASC,eAAe,SD4HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvB,MAAK,SAAAwB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.4a6339b7.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst SearchBox=({searchchange}) => {\r\n    return (\r\n            \r\n            <input type=\"search\" \r\n            className=\"pa2 ba \"\r\n            placeholder=\"Search for robots\"\r\n            onChange={searchchange}\r\n            />\r\n    )\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\nimport '../css/style.css'\n\n\nconst Card= ({name,email,id})=> {\n  return (\n    <div className=\"tc grow bg-light-green br3 ma2 dib bw2 shadow-5\">\n          <img src={`https://robohash.org/${id}?100x100`} alt=\"robots\"/>\n          <div>\n            <h2>{name}</h2>\n            <p>{email}</p>\n        </div>\n    </div>\n  );\n}\n\nexport default Card;\n","import React from 'react';\r\nimport Card from './Card';\r\nconst cardList=({robots})=> {\r\n    const cardArray = robots.map((_user, i)=>{\r\n        return <Card key={i} id={robots[i].id} name={robots[i].name} email={robots[i].email}/>\r\n    })\r\n    return (\r\n        <div>\r\n           {cardArray}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default cardList;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{overflow: 'scroll', overflowX: 'hidden',border: '5px solid black',height:'800px'}}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\nimport SearchBox from '../components/SearchBox';\r\nimport CardList from '../components/CardList';\r\nimport Scroll from '../components/Scroll'\r\n\r\nclass App extends Component {\r\n    constructor(){\r\n        super()\r\n        this.state = {\r\n            robots:[],\r\n            searchfield: ''\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response => response.json())\r\n        .then(users => this.setState({robots: users}));\r\n    }\r\n\r\n    onSearchChange=(event)=> {\r\n        this.setState({ searchfield: event.target.value})\r\n    }\r\n\r\n    render() {\r\n        const {robots,searchfield}= this.state;\r\n        const fillterRobots = robots.filter(robots =>{\r\n            return robots.name.toLowerCase().includes(searchfield.toLowerCase());\r\n        })\r\n        return ( \r\n            ! robots.length ? \r\n            <h1>loading...</h1> : \r\n            (   \r\n                <div className=\"tc\">\r\n                        <h1 className=\"f1\">Robo Search</h1>\r\n                        <SearchBox searchchange={this.onSearchChange}/>\r\n                        <Scroll>\r\n                            <CardList robots={fillterRobots}/>\r\n                        </Scroll>                       \r\n                </div>\r\n            )      \r\n        )\r\n    };\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'tachyons';\nimport App from './containers/App.js';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App/>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}